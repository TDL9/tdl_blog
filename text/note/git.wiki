= git note =

{{{

this = git_note :# "teach me git"
git_note ∋ 
    原理
    细节
    资源

git ∈ distributed . version_control . system

VCS <<- version_control system
CVCS <<- Centralized VCS
DVCS <<- Distributed VCS
}}}



{{{
comment
    为什么你需要 DVCS:
    1/ TODO 
    2/ TODO
    3/ TODO
    ref
        https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-Git-%E7%AE%80%E5%8F%B2

?
    https://git-scm.com/book/en/v2/Getting-Started-About-Version-Control#Figure3

git.hash-alg = SHA-1 : Any -> ([16]^40 | 160 bits)
git.db-index = git.hash

git.states = modified | staged | committed


LEFT
    "GUI of git"
    "lazy git"
    diff package.git package.git-all
        ref https://packages.debian.org/sid/git-all
    
    ref
        https://git-scm.com/book/zh/v2/Git-%E5%9F%BA%E7%A1%80-%E8%AE%B0%E5%BD%95%E6%AF%8F%E6%AC%A1%E6%9B%B4%E6%96%B0%E5%88%B0%E4%BB%93%E5%BA%93
        "运行 git add 命令。 这是个多功能命令：可以用它开始跟踪新文件，或者把已跟踪的文件放到暂存区，还能用于合并时把有冲突的文件标记为已解决状态等。 将这个命令理解为“精确地将内容添加到下一次提交中”而不是“将一个文件添加到项目中”要更加合适。"
    
    git diff 的输出的意义
    
comment
    要养成一开始就为你的新仓库设置好 .gitignore 文件的习惯，以免将来误提交这类无用的文件。

    stage 概念上也是一份完整版本?
    
    记住，在 Git 中任何 已提交 的东西几乎总是可以恢复的。
    甚至那些被删除的分支中的提交或使用 --amend 选项覆盖的提交也可以。
    
amend




TARGET
    comment
        things you may want to do
    
    def
        areas-
            1 : working directory
            2 : staged
            3 : tree
            4 : stash
    
    - move file from area-x to area-y
        1->2 : add
        2->3 : commit
        3->2 : restore --staged
        2->1 : restore
    
    - delete a file from area-x
    
    - view all changes in a commit (or patch?)
    
    - move a (maybe remote) branch?


LEFT
    "mail"
        IMAP
        SMTP
    
    GPG
        all Chapter 7.4

    You can do a lot more with the fast-import tool – handle different modes, binary data, multiple branches and merging, tags, progress indicators, and more. A number of examples of more complex scenarios are available in the contrib/fast-import directory of the Git source code.
    
    .gitattributes
    
}}}

== git 查看信息专题 ==

=== git查看提交修改的文件列表 / commit相关信息 ===

git show / git log 技巧

todo : https://blog.csdn.net/hunter168_wang/article/details/121497595

=== git 查看暂存区 ===

todo : https://blog.csdn.net/qq_40021015/article/details/121741959

=== git diff 技巧 ===

todo : https://blog.csdn.net/weixin_44038264/article/details/119729593

=== git diff 输出的结果什么意思？ ===

todo : https://blog.csdn.net/shaotianyang12/article/details/122025393

=== git 上下箭头是什么意思? (常见于 git客户端 或 shell prompt) ===

- ↑表示本地分支 *领先* 于远程分支多少commit

- ↓表示本地分支 *落后* 于远程分支多少commit

ref : https://blog.csdn.net/qq_42764468/article/details/125377758

----

== 开放问题 ==

=== 如何避免提交debug用的代码（如输出中间变量） ===

==== solution_1 ====

https://blog.jonschneider.com/2021/01/configuring-git-to-prevent-commits-of.html

用 pre-commit hook 检查是否存在 "DONOTCOMMIT"

{{{bash class="code"
#!/bin/bash

FOUND=$(git diff-index --cached -U0 HEAD -- | grep DONOTCOMMIT | wc -l)

if [[ $FOUND -gt 0 ]]; then
    echo "pre-commit hook: DONOTCOMMIT detected, commit not allowed"
    echo "(enforced from: ~/.git_templates/hooks/pre-commit)"
    exit 1
fi
}}}

缺点：需要手动删除 / commit -p

其他相似 pre-commit hook :
- https://gist.github.com/wacko/62560b45c1d191859d6b
- https://anotherdatum.com/avoid-committing-junk.html

==== solution_2 ====

https://stackoverflow.com/questions/43896214/how-to-not-commit-temporary-debug-statements

新建分支 `hotfix` 开发和debug，再 cherry-pick。

{{{bash class="code"
git checkout master
git cherry-pick hotfix
# solve the conflict files manually and keep the form you want
git add .
git cherry-pick --continue
}}}

基本没用，cherry-pick 尚不支持 --patch。你需要
{{{
git cherry-pick -n <commit> (--no-commit)
git reset
git add -p
}}}
没有提示也非强制，还是可能误提交。

ref : https://stackoverflow.com/questions/1526044/partly-cherry-picking-a-commit-with-git



=== 换行符专题 ===

问题描述 : Windows 下默认换行符为 <CR><LF> 而 Max 和 Linux 为 <LF>

CR : Carriage Return 回车
LF : Line Feed 换行



----


== Tips ==

=== Git Switch branch without files checkout | 切换分支不改变 worktree index 文件 ===

git symbolic-ref HEAD refs/heads/otherbranch

ref : https://stackoverflow.com/questions/1282639/switch-git-branch-without-files-checkout

*待验证* : 
下面还有一个回答，只使用 git 基础指令 ("porcelain commands" in [[https://git-scm.com/book/en/v2|Progit]])
基本上是借用一个临时分支进行 reset。而关键在于：当你 checkout 的分支和 HEAD 实际指向同一个 commit 时，worktree 不会被改动。

=== github personal access tokens 在哪？ ===

右上角头像 -> Settings -> 左侧 Developer settings -> 左侧 Personal access tokens

=== 全局 hook ===

{{{bash class="code"
git config --global init.templatedir '~/.git_template'
}}}

将 hooks 放入 `~/.git_template/hooks` 即可。

ref : https://stackoverflow.com/questions/2293498/applying-a-git-post-commit-hook-to-all-current-and-future-repositories

已经存在的 repo，可再次运行 `git init` 来应用 template

ref : https://git-scm.com/docs/git-init

=== 搭建 ssh git 服务器 ===

基本只要在能够 ssh 的服务器上，通过 `git init --bare` 初始化一个裸仓库就可以了。

更详细请参考 : https://zhuanlan.zhihu.com/p/146408354

todo : 配置 ssh 密钥部分

还可通过 `git instaweb` 启动一个简单的网页服务，浏览 repo 信息。




